service: shortlink
frameworkVersion: "3"

useDotenv: true

custom:
  esbuild:
    bundle: true
    minify: false
  scriptable:
    hooks:
      after:deploy:finalize: node verifyEmailIdentity.mjs
  autoswagger:
    apiKeyHeaders:
      - Authorization
    basePath: /${sls:stage}

plugins:
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-esbuild
  - serverless-scriptable-plugin
  - serverless-auto-swagger

provider:
  name: aws
  runtime: nodejs18.x
  iam:
    role: MainRole
  environment:
    DYNAMODB_CUSTOMER_TABLE: ${self:service}-customerTable-${sls:stage}
    DYNAMODB_LINKS_TABLE: ${self:service}-linksTable-${sls:stage}
    THE_QUEUE_URL: { Ref: TheQueue }
    JWT_SECRET: ${env:JWT_SECRET}
    STAGE: ${sls:stage}
    EMAIL_TO_SEND_FROM: ${env:EMAIL_TO_SEND_FROM}
    REGION: ${aws:region}
    ACCOUNT_ID: ${aws:accountId}
    DEPLOYMENT_URL: !Sub 'https://${ApiGatewayRestApi}.execute-api.${aws:region}.amazonaws.com/${sls:stage}/'

functions:
  verifyToken:
    handler: src/utils/jwtToken.verifyToken
  registerUser:
    handler: src/auth/registerUser.register
    events:
      - http:
          path: /register
          method: post
          bodyType: User
          responseData:
            201:
              description: "New user registered"
              bodyType: Token
            400:
              description: "Invalid body params"
              bodyType: ErrorStr
            409:
              description: "User already exists"
              bodyType: ErrorStr
            500:
              description: "Server error"
              bodyType: ErrorStr

  loginUser:
    handler: src/auth/loginUser.login
    events:
      - http:
          path: /login
          method: post
          bodyType: User
          responseData:
            200:
              description: "Login successful"
              bodyType: Token
            400:
              description: "Invalid body params"
              bodyType: ErrorStr
            401:
              description: "Invalid password"
              bodyType: ErrorStr
            404:
              description: "User not found"
              bodyType: ErrorStr
            500:
              description: "Internal server error"
              bodyType: ErrorStr
  createShortLink:
    handler: src/link/createShortLink.createShortLink
    events:
      - http:
          path: /
          method: post
          authorizer:
            name: verifyToken
          bodyType: ICreateShortLink
          responseData:
            200:
              description: "Short link created successfully"
              bodyType: Link
            400:
              description: "Invalid request body"
              bodyType: ErrorStr
            500:
              description: "An error occurred while creating the short link"
              bodyType: ErrorStr
  redirectShortLink:
    handler: src/link/redirectShortLink.redirectShortLink
    events:
      - http:
          path: /{id}
          method: get
          responseData:
            302:
              description: "Redirecting to the original link"
            400:
              description: "Short link ID is missing in the request."
              bodyType: ErrorStr
            404:
              description: "Short link not found."
              bodyType: ErrorStr
            500:
              description: "An error occurred while redirecting the short link."
              bodyType: ErrorStr
  listUserLinks:
    handler: src/link/listUserLinks.listUserLinks
    events:
      - http:
          path: /links
          method: get
          cors: true
          authorizer:
            name: verifyToken
          responseData:
            200:
              description: "List of user links"
              bodyType: UserLinkArray
            500:
              description: "An error occurred while listing links."
              bodyType: ErrorStr
  deleteExpiredShortLinks:
    handler: src/link/deleteExpiredShortLinks.deleteExpiredShortLinks
  deleteLinkByID:
    handler: src/link/deleteLinkByID.deleteLinkByID
    events:
      - http:
          path: /{id}
          method: delete
          cors: true
          authorizer: verifyToken
          responseData:
            200:
              description: "Short link deleted successfully"
            400:
              description: "Short ID is required"
              bodyType: ErrorStr
            403:
              description: "Forbidden: You are not the owner of this link"
              bodyType: ErrorStr
            404:
              description: "Link not found"
              bodyType: ErrorStr
            500:
              description: "An error occurred while deleting the short link"
              bodyType: ErrorStr
  sendEmailNotifications:
    handler: src/link/sendEmailNotifications.sendEmailNotifications
    events:
      - sqs:
          batchSize: 10
          arn:
            Fn::GetAtt:
              - TheQueue
              - Arn

resources:
  Resources:
    MainRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: MainRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - events.amazonaws.com
                  - scheduler.amazonaws.com
              Action: sts:AssumeRole
              Condition:
                StringEquals:
                  aws:SourceAccount: ${aws:accountId}
        Policies:
          - PolicyName: mainPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - dynamodb:PutItem
                    - dynamodb:Get*
                    - dynamodb:Scan*
                    - dynamodb:UpdateItem
                    - dynamodb:DeleteItem
                    - dynamodb:BatchWriteItem
                    - sqs:*
                    - ses:*
                    - scheduler:*
                    - logs:*
                    - iam:PassRole
                    - lambda:InvokeFunction
                  Resource:
                    - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-customerTable-${sls:stage}
                    - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-linksTable-${sls:stage}
                    - arn:aws:sqs:${aws:region}:641832978610:TheQueue
                    - arn:aws:ses:${aws:region}:${aws:accountId}:*
                    - arn:aws:scheduler:${aws:region}:${aws:accountId}:*
                    - arn:aws:iam::${aws:accountId}:role/MainRole
                    - arn:aws:lambda:${aws:region}:${aws:accountId}:function:shortlink-dev-deleteExpiredShortLinks:*
                    - arn:aws:lambda:${aws:region}:${aws:accountId}:function:shortlink-dev-deleteExpiredShortLinks
                    - arn:aws:logs:${aws:region}:${aws:accountId}:*

    TheQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: TheQueue
    DeleteLinkGroup:
      Type: AWS::Scheduler::ScheduleGroup
      Properties:
        Name: deleteLink
    CustomerTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: primary_key
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: primary_key
            KeyType: HASH
        TableName: ${self:service}-customerTable-${sls:stage}
    LinksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        TableName: ${self:service}-linksTable-${sls:stage}
